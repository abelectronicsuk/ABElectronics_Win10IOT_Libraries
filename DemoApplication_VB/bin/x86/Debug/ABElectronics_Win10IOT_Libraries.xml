<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABElectronics_Win10IOT_Libraries</name>
    </assembly>
    <members>
        <member name="T:ABElectronics_Win10IOT_Libraries.ABE_Helpers">
            <summary>
                Helpers for the ABElectronics library.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.UpdateByte(System.Byte,System.Byte,System.Boolean)">
            <summary>
                Updates the value of a single bit within a byte and returns the updated byte
            </summary>
            <param name="value">The byte to update</param>
            <param name="position">Position of the bit to change</param>
            <param name="bitstate">The new bit value</param>
            <returns>Updated byte</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.UpdateInt(System.Int32,System.Byte,System.Boolean)">
            <summary>
                Updates the value of a single bit within an int and returns the updated int
            </summary>
            <param name="value">The int to update</param>
            <param name="position">Position of the bit to change</param>
            <param name="bitstate">The new bit value</param>
            <returns>Updated int</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.CheckBit(System.Byte,System.Byte)">
            <summary>
                Checks the value of a single bit within a byte.
            </summary>
            <param name="value">The value to query</param>
            <param name="position">The bit position within the byte</param>
            <returns>boolean value of the asked bit</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.CheckIntBit(System.Int32,System.Byte)">
            <summary>
                Checks the value of a single bit within an int.
            </summary>
            <param name="value">The value to query</param>
            <param name="position">The bit position within the byte</param>
            <returns>boolean value of the asked bit</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.WriteI2CByte(Windows.Devices.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
                Writes a single byte to an I2C device.
            </summary>
            <param name="bus">I2C device</param>
            <param name="register">Address register</param>
            <param name="value">Value to write to the register</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.WriteI2CSingleByte(Windows.Devices.I2c.I2cDevice,System.Byte)">
            <summary>
                Writes a single byte to an I2C device.
            </summary>
            <param name="bus">I2C device</param>
            <param name="value">Value to write to the register</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.ReadI2CByte(Windows.Devices.I2c.I2cDevice,System.Byte)">
            <summary>
                Read a single byte from an I2C device.
            </summary>
            <param name="bus">I2C device</param>
            <param name="register">Address register to read from</param>
            <returns>Read value</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ABE_Helpers.ReadI2CBlockData(Windows.Devices.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
                Read a single byte from an I2C device.
            </summary>
            <param name="bus">I2C device</param>
            <param name="register">Address register to read from</param>
            <param name="bytesToReturn">Number of bytes to return</param>
            <returns>Read block of bytes</returns>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.ADCDACPi">
            <summary>
                Class for accessing the ADCDAC Pi from AB Electronics UK.
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCDACPi.IsConnected">
            <summary>
                Event triggers when a connection is established.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.Connect">
            <summary>
                Open a connection to the ADCDAC Pi.
            </summary>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.ADCDACPi.Connected">
            <summary>
                Event occurs when connection is made.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.ReadADCVoltage(System.Byte)">
            <summary>
                Read the voltage from the selected <paramref name="channel" /> on the ADC.
            </summary>
            <param name="channel">1 or 2</param>
            <returns>voltage</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.ReadADCRaw(System.Byte)">
            <summary>
                Read the raw value from the selected <paramref name="channel" /> on the ADC.
            </summary>
            <param name="channel">1 or 2</param>
            <returns>Integer</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.SetADCrefVoltage(System.Double)">
            <summary>
                Set the reference <paramref name="voltage" /> for the analogue to digital converter.
                The ADC uses the raspberry pi 3.3V power as a <paramref name="voltage" /> reference
                so using this method to set the reference to match the exact output 
                <paramref name="voltage" /> from the 3.3V regulator will increase the accuracy of
                the ADC readings.
            </summary>
            <param name="voltage">double</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.SetDACVoltage(System.Byte,System.Double)">
            <summary>
                Set the <paramref name="voltage" /> for the selected channel on the DAC.
            </summary>
            <param name="channel">1 or 2</param>
            <param name="voltage">Voltage can be between 0 and 2.047 volts</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.SetDACRaw(System.Byte,System.Int16)">
            <summary>
                Set the raw <paramref name="value" /> from the selected <paramref name="channel" /> on the DAC.
            </summary>
            <param name="channel">1 or 2</param>
            <param name="value">Value between 0 and 4095</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.Dispose">
            <summary>
                Dispose of the resources
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDACPi.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.ADCPi">
            <summary>
                Class for controlling the ADC Pi and ADC Pi Plus expansion boards from AB Electronics UK
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.#ctor(System.Byte,System.Byte)">
            <summary>
                Create an instance of a ADC Pi bus.
            </summary>
            <param name="i2caddress1">I2C address for the U1 (channels 1 - 4)</param>
            <param name="i2caddress2">I2C address for the U2 (channels 5 - 8)</param>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCPi.Address1">
            <summary>
                I2C address for the U1 (channels 1 - 4).
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCPi.Address2">
            <summary>
                I2C address for the U2 (channels 5 - 8).
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCPi.IsConnected">
            <summary>
                Shows if there is a connection with the ADC Pi.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.Connect">
            <summary>
                Open a connection with the ADC Pi.
            </summary>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.ADCPi.Connected">
            <summary>
                Event occurs when connection is made.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.SetChannel(System.Byte)">
            <summary>
                Private method for updating the configuration to the selected <paramref name="channel" />.
            </summary>
            <param name="channel">ADC channel, 1 - 8</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.ReadVoltage(System.Byte)">
            <summary>
                Returns the voltage from the selected ADC <paramref name="channel" />.
            </summary>
            <param name="channel">1 to 8</param>
            <returns>Read voltage</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.ReadRaw(System.Byte)">
            <summary>
                Reads the raw value from the selected ADC <paramref name="channel" />.
            </summary>
            <param name="channel">1 to 8</param>
            <returns>raw integer value from ADC buffer</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.SetPGA(System.Byte)">
            <summary>
                Set the PGA (Programmable Gain Amplifier) <paramref name="gain"/>.
            </summary>
            <param name="gain">Set to 1, 2, 4 or 8</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.SetBitRate(System.Byte)">
            <summary>
                Set the sample resolution (rate).
            </summary>
            <param name="rate">
                12 = 12 bit(240SPS max),
                14 = 14 bit(60SPS max),
                16 = 16 bit(15SPS max),
                18 = 18 bit(3.75SPS max)
            </param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.SetConversionMode(System.Boolean)">
            <summary>
                Set the conversion mode for ADC.
            </summary>
            <param name="mode">0 = One shot conversion mode, 1 = Continuous conversion mode</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.Dispose">
            <summary>
                Dispose of the resources
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCPi.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi">
            <summary>
                Class for controlling the ADC Differential Pi and Delta-Sigma Pi expansion board from AB Electronics UK
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.#ctor(System.Byte,System.Byte)">
            <summary>
                Create an instance of a Delta-Sigma Pi bus.
            </summary>
            <param name="i2caddress1">I2C address for the U1 (channels 1 - 4)</param>
            <param name="i2caddress2">I2C address for the U2 (channels 5 - 8)</param>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.Address1">
            <summary>
                I2C address for the U1 (channels 1 - 4).
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.Address2">
            <summary>
                I2C address for the U2 (channels 5 - 8).
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.IsConnected">
            <summary>
                Shows if there is a connection with the ADC Pi.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.Connect">
            <summary>
                Open a connection with the Delta-Sigma Pi.
            </summary>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.Connected">
            <summary>
                Event occurs when connection is made.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.SetChannel(System.Byte)">
            <summary>
                Private method for updating the configuration to the selected <paramref name="channel" />.
            </summary>
            <param name="channel">ADC channel, 1 - 8</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.ReadVoltage(System.Byte)">
            <summary>
                Returns the voltage from the selected ADC <paramref name="channel" />.
            </summary>
            <param name="channel">1 to 8</param>
            <returns>Read voltage</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.ReadRaw(System.Byte)">
            <summary>
                Reads the raw value from the selected ADC <paramref name="channel" />.
            </summary>
            <param name="channel">1 to 8</param>
            <returns>raw integer value from ADC buffer</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.SetPGA(System.Byte)">
            <summary>
                Set the PGA (Programmable Gain Amplifier) <paramref name="gain"/>.
            </summary>
            <param name="gain">Set to 1, 2, 4 or 8</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.SetBitRate(System.Byte)">
            <summary>
                Set the sample resolution (rate).
            </summary>
            <param name="rate">
                12 = 12 bit(240SPS max),
                14 = 14 bit(60SPS max),
                16 = 16 bit(15SPS max),
                18 = 18 bit(3.75SPS max)
            </param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.SetConversionMode(System.Boolean)">
            <summary>
                Set the conversion <paramref name="mode" /> for ADC.
            </summary>
            <param name="mode">0 = One shot conversion mode, 1 = Continuous conversion mode</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.Dispose">
            <summary>
                Dispose of the resources
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ADCDifferentialPi.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.ExpanderPi">
            <summary>
            Class Library for use with the Expander Pi
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ExpanderPi.IsConnected">
            <summary>
                Shows if there is a connection with the Expander Pi
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.#ctor">
            <summary>
                Create an instance of the Expander Pi.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.Connect">
            <summary>
                Open a connection to the Expander Pi.
            </summary>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.ExpanderPi.Connected">
            <summary>
                Event occurs when connection is made.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.ADCReadVoltage(System.Byte,System.Byte)">
            <summary>
                Read the voltage from the selected <paramref name="channel" /> on the ADC.
            </summary>
            <param name="channel">1 to 8</param>
            <param name="mode">1 = Single Ended Input, 2 = Differential Input</param>
            When in differential mode setting channel to 1 will make IN1 = IN+ and IN2 = IN-
            When in differential mode setting channel to 2 will make IN1 = IN- and IN2 = IN+
            When in differential mode setting channel to 3 will make IN3 = IN+ and IN4 = IN-
            When in differential mode setting channel to 4 will make IN3 = IN- and IN4 = IN+
            When in differential mode setting channel to 5 will make IN5 = IN+ and IN6 = IN-
            When in differential mode setting channel to 6 will make IN5 = IN- and IN6 = IN+
            When in differential mode setting channel to 7 will make IN7 = IN+ and IN8 = IN-
            When in differential mode setting channel to 8 will make IN7 = IN- and IN8 = IN+
            <returns>voltage</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.ADCReadRaw(System.Byte,System.Byte)">
            <summary>
                Read the raw value from the selected <paramref name="channel" /> on the ADC.
            </summary>
            <param name="channel">1 to 8</param>
            <param name="mode">1 = Single Ended Input, 2 = Differential Input</param>
            When in differential mode setting channel to 1 will make IN1 = IN+ and IN2 = IN-
            When in differential mode setting channel to 2 will make IN1 = IN- and IN2 = IN+
            When in differential mode setting channel to 3 will make IN3 = IN+ and IN4 = IN-
            When in differential mode setting channel to 4 will make IN3 = IN- and IN4 = IN+
            When in differential mode setting channel to 5 will make IN5 = IN+ and IN6 = IN-
            When in differential mode setting channel to 6 will make IN5 = IN- and IN6 = IN+
            When in differential mode setting channel to 7 will make IN7 = IN+ and IN8 = IN-
            When in differential mode setting channel to 8 will make IN7 = IN- and IN8 = IN+
            <returns>Integer</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.ADCSetRefVoltage(System.Double)">
            <summary>
                Set the reference <paramref name="voltage" /> for the analogue to digital converter.
                The Expander Pi contains an onboard 4.096V voltage reference.  If you want to use an external
                reference between 0V and 5V, disconnect the jumper J1 and connect your reference voltage to the Vref pin.
            </summary>
            <param name="voltage">double</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.DACSetVoltage(System.Byte,System.Double,System.Byte)">
            <summary>
                Set the <paramref name="voltage" /> for the selected channel on the DAC.
            </summary>
            <param name="channel">1 or 2</param>
            <param name="voltage">Voltage will be between 0 and 2.047V when gain is 1, 0 and 4.096V when gain is 2</param>
            <param name="gain">Gain can be 1 or 2</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.DACSetRaw(System.Byte,System.Int16,System.Byte)">
            <summary>
                Set the raw <paramref name="value" /> from the selected <paramref name="channel" /> on the DAC.
            </summary>
            <param name="channel">1 or 2</param>
            <param name="value">Value between 0 and 4095</param>
            <param name="gain">Gain can be 1 or 2</param>
            Voltage will be between 0 and 2.047V when gain is 1, 0 and 4.096V when gain is 2
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetPinDirection(System.Byte,System.Boolean)">
            <summary>
                Set IO <paramref name="direction" /> for an individual pin.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="direction">true = input, false = output</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetPortDirection(System.Byte,System.Byte)">
            <summary>
                Set the <paramref name="direction"/> for an IO <paramref name="port"/>.
                You can control the direction of all 8 pins on a port by sending a single byte value.
                Each bit in the byte represents one pin so for example 0x0A would set pins 2 and 4 to
                inputs and all other pins to outputs.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="direction">Direction for all pins on the port.  1 = input, 0 = output</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetPinPullup(System.Byte,System.Boolean)">
            <summary>
                Set the internal 100K pull-up resistors for an individual pin.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="value">true = enabled, false = disabled</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetPortPullups(System.Byte,System.Byte)">
            <summary>
                set the internal 100K pull-up resistors for the selected IO port.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOWritePin(System.Byte,System.Boolean)">
            <summary>
                Write to an individual <paramref name="pin"/>.
            </summary>
            <param name="pin">1 - 16</param>
            <param name="value">0 = logic low, 1 = logic high</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOWritePort(System.Byte,System.Byte)">
            <summary>
                Write to all pins on the selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOReadPin(System.Byte)">
            <summary>
                read the value of an individual <paramref name="pin"/>.
            </summary>
            <param name="pin">1 - 16</param>
            <returns>0 = logic level low, 1 = logic level high</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOReadPort(System.Byte)">
            <summary>
                Read all pins on the selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <returns>returns number between 0 and 255 or 0x00 and 0xFF</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOInvertPort(System.Byte,System.Byte)">
            <summary>
                Invert the polarity of the pins on a selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="polarity">0x00 - 0xFF (0 = same logic state of the input pin, 1 = inverted logic state of the input pin)</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOInvertPin(System.Byte,System.Boolean)">
            <summary>
                Invert the <paramref name="polarity" /> of the selected <paramref name="pin" />.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="polarity">False = same logic state of the input pin, True = inverted logic state of the input pin</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOMirrorInterrupts(System.Byte)">
            <summary>
                Sets the mirror status of the interrupt pins.
            </summary>
            <param name="value">
                0 = The INT pins are not mirrored. INTA is associated with PortA and INTB is associated with PortB.
                1 = The INT pins are internally connected
            </param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetInterruptPolarity(System.Byte)">
            <summary>
                This sets the polarity of the INT output pins.
            </summary>
            <param name="value">1 = Active - high. 0 = Active - low.</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetInterruptType(System.Byte,System.Byte)">
            <summary>
                Sets the type of interrupt for each pin on the selected <paramref name="port"/>.
                1 = interrupt is fired when the pin matches the default value.
                0 = the interrupt is fired on state change.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetInterruptDefaults(System.Byte,System.Byte)">
            <summary>
                These bits set the compare value for pins configured for interrupt-on-change
                on the selected <paramref name="port"/>. If the associated pin level is the
                opposite from the register bit, an interrupt occurs.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetInterruptOnPort(System.Byte,System.Byte)">
            <summary>
                Enable interrupts for the pins on the selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOSetInterruptOnPin(System.Byte,System.Boolean)">
            <summary>
                Enable interrupts for the selected <paramref name="pin"/>.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="value">0 = interrupt disabled, 1 = interrupt enabled</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOReadInterruptStatus(System.Byte)">
            <summary>
                Read the interrupt status for the pins on the selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOReadInterruptCapture(System.Byte)">
            <summary>
                Read the value from the selected <paramref name="port"/> at the time
                of the last interrupt trigger.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.IOResetInterrupts">
            <summary>
                Reset the interrupts A and B to 0.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.BCDtoInt(System.Byte)">
            <summary>
                Converts BCD format to integer.
            </summary>
            <param name="x">BCD formatted byte</param>
            <returns></returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.BytetoBCD(System.Int32)">
            <summary>
                Converts byte to BCD format.
            </summary>
            <param name="val">value to convert</param>
            <returns>Converted byte</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.RTCSetDate(System.DateTime)">
            <summary>
                Set the date and time on the RTC.
            </summary>
            <param name="date">DateTime</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.RTCReadDate">
            <summary>
                Read the date and time from the RTC.
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.RTCEnableOutput">
            <summary>
                Enable the clock output pin.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.RTCDisableOutput">
            <summary>
                Disable the clock output pin.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.RTCSetFrequency(System.Byte)">
            <summary>
                Set the frequency of the output pin square-wave.
            </summary>
            <param name="frequency">options are: 1 = 1Hz, 2 = 4.096KHz, 3 = 8.192KHz, 4 = 32.768KHz</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.Dispose">
            <summary>
                Dispose of the resources
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ExpanderPi.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.IOPi">
            <summary>
                Class for controlling the IO Pi and IO Pi Plus expansion boards from AB Electronics UK
                Based on the MCP23017 IO expander IC from Microchip.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.IODIRA">
            <summary>
                IO direction A - 1= input 0 = output
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.IODIRB">
            <summary>
                IO direction B - 1= input 0 = output
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.IPOLA">
            <summary>
                Input polarity A - If a bit is set, the corresponding GPIO register bit will reflect the inverted value on the pin.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.IPOLB">
            <summary>
                Input polarity B - If a bit is set, the corresponding GPIO register bit will reflect the inverted value on the pin.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.GPINTENA">
            <summary>
                The GPINTEN register controls the interrupt-on-change feature for each pin on port A.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.GPINTENB">
            <summary>
                The GPINTEN register controls the interrupt-on-change feature for each pin on port B.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.DEFVALA">
            <summary>
                Default value for port A - These bits set the compare value for pins configured for interrupt-on-change. If the
                associated pin level is the opposite from the register bit, an interrupt occurs.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.DEFVALB">
            <summary>
                Default value for port B - These bits set the compare value for pins configured for interrupt-on-change. If the
                associated pin level is the opposite from the register bit, an interrupt occurs.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.INTCONA">
            <summary>
                Interrupt control register for port A.  If 1 interrupt is fired when the pin matches the default value, if 0 the
                interrupt is fired on state change.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.INTCONB">
            <summary>
                Interrupt control register for port B.  If 1 interrupt is fired when the pin matches the default value, if 0 the
                interrupt is fired on state change.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.IOCON">
            <summary>
                See datasheet for configuration register
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.GPPUA">
            <summary>
                pull-up resistors for port A
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.GPPUB">
            <summary>
                pull-up resistors for port B
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.INTFA">
            <summary>
                The INTFA register reflects the interrupt condition on the port A pins of any pin that is enabled for interrupts. A
                set bit indicates that the associated pin caused the interrupt.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.INTFB">
            <summary>
                The INTFB register reflects the interrupt condition on the port B pins of any pin that is enabled for interrupts. A
                set bit indicates that the associated pin caused the interrupt.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.INTCAPA">
            <summary>
                The INTCAP register captures the GPIO port A value at the time the interrupt occurred.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.INTCAPB">
            <summary>
                The INTCAP register captures the GPIO port B value at the time the interrupt occurred.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.GPIOA">
            <summary>
                Data port A.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.GPIOB">
            <summary>
                Data port B.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.OLATA">
            <summary>
                Output latches A.
            </summary>
        </member>
        <member name="F:ABElectronics_Win10IOT_Libraries.IOPi.OLATB">
            <summary>
                Output latches B
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.#ctor(System.Byte)">
            <summary>
                Create an instance of an IOPi bus.
            </summary>
            <param name="i2caddress">I2C Address of IO Pi bus</param>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.IOPi.Address">
            <summary>
                I2C address for the IO Pi bus
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.IOPi.IsConnected">
            <summary>
                Shows if there is a connection with the IO Pi
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.Connect">
            <summary>
                Open a connection with the IO Pi.
            </summary>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.IOPi.Connected">
            <summary>
                Event occurs when connection is made.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetPinDirection(System.Byte,System.Boolean)">
            <summary>
                Set IO <paramref name="direction" /> for an individual pin.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="direction">true = input, false = output</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.GetPinDirection(System.Byte)">
            <summary>
                get the direction of an individual <paramref name="pin"/>.
            </summary>
            <param name="pin">1 - 16</param>
            <returns>0 = logic level low, 1 = logic level high</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetPortDirection(System.Byte,System.Byte)">
            <summary>
                Set the <paramref name="direction"/> for an IO <paramref name="port"/>.
                You can control the direction of all 8 pins on a port by sending a single byte value.
                Each bit in the byte represents one pin so for example 0x0A would set pins 2 and 4 to
                inputs and all other pins to outputs.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="direction">Direction for all pins on the port.  1 = input, 0 = output</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetPinPullup(System.Byte,System.Boolean)">
            <summary>
                Set the internal 100K pull-up resistors for an individual pin.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="value">true = enabled, false = disabled</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.GetPinPullUp(System.Byte)">
            <summary>
                get the pull-up status of an individual <paramref name="pin"/>.
            </summary>
            <param name="pin">1 - 16</param>
            <returns>0 = logic level low, 1 = logic level high</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetPortPullups(System.Byte,System.Byte)">
            <summary>
                set the internal 100K pull-up resistors for the selected IO port.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.WritePin(System.Byte,System.Boolean)">
            <summary>
                Write to an individual <paramref name="pin"/>.
            </summary>
            <param name="pin">1 - 16</param>
            <param name="value">0 = logic low, 1 = logic high</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.WritePort(System.Byte,System.Byte)">
            <summary>
                Write to all pins on the selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ReadPin(System.Byte)">
            <summary>
                read the value of an individual <paramref name="pin"/>.
            </summary>
            <param name="pin">1 - 16</param>
            <returns>0 = logic level low, 1 = logic level high</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ReadPort(System.Byte)">
            <summary>
                Read all pins on the selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <returns>returns number between 0 and 255 or 0x00 and 0xFF</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.InvertPort(System.Byte,System.Byte)">
            <summary>
                Invert the polarity of the pins on a selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="polarity">0x00 - 0xFF (0 = same logic state of the input pin, 1 = inverted logic state of the input pin)</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.InvertPin(System.Byte,System.Boolean)">
            <summary>
                Invert the <paramref name="polarity" /> of the selected <paramref name="pin" />.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="polarity">False = same logic state of the input pin, True = inverted logic state of the input pin</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.MirrorInterrupts(System.Byte)">
            <summary>
                Sets the mirror status of the interrupt pins.
            </summary>
            <param name="value">
                0 = The INT pins are not mirrored. INTA is associated with PortA and INTB is associated with PortB.
                1 = The INT pins are internally connected
            </param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptPolarity(System.Byte)">
            <summary>
                This sets the polarity of the INT output pins.
            </summary>
            <param name="value">1 = Active - high. 0 = Active - low.</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptOutputType(System.Byte)">
            <summary>
                This sets the INT output pins to be active driver or open-drain.
                Setting to open-drain overrides the interrupt polarity.
            </summary>
            <param name="value">1 = Open Drain. 0 = Active Driver.</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptType(System.Byte,System.Byte)">
            <summary>
                Sets the type of interrupt for each pin on the selected <paramref name="port"/>.
                1 = interrupt is fired when the pin matches the default value.
                0 = the interrupt is fired on state change.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptDefaults(System.Byte,System.Byte)">
            <summary>
                These bits set the compare value for pins configured for interrupt-on-change
                on the selected <paramref name="port"/>. If the associated pin level is the
                opposite from the register bit, an interrupt occurs.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptOnPort(System.Byte,System.Byte)">
            <summary>
                Enable interrupts for the pins on the selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
            <param name="value">number between 0 and 255 or 0x00 and 0xFF</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.SetInterruptOnPin(System.Byte,System.Boolean)">
            <summary>
                Enable interrupts for the selected <paramref name="pin"/>.
            </summary>
            <param name="pin">1 to 16</param>
            <param name="value">0 = interrupt disabled, 1 = interrupt enabled</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ReadInterruptStatus(System.Byte)">
            <summary>
                Read the interrupt status for the pins on the selected <paramref name="port"/>.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ReadInterruptCapture(System.Byte)">
            <summary>
                Read the value from the selected <paramref name="port"/> at the time
                of the last interrupt trigger.
            </summary>
            <param name="port">0 = pins 1 to 8, 1 = pins 9 to 16</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.ResetInterrupts">
            <summary>
                Reset the interrupts A and B to 0.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.GetRegister(System.Byte)">
            <summary>
                get the value of a <paramref name="register"/> from the MCP23017.
            </summary>
            <param name="register">0 to 255</param>
            <returns>Register Value</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.Dispose">
            <summary>
                Dispose of the resources
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.IOPi.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.RTCPi">
            <summary>
                Class for controlling the RTC Pi and RTC Pi Plus expansion boards from AB Electronics UK
                Based on the DS1307 real-time clock from Maxim.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.#ctor">
            <summary>
                Create an instance of a RTC Pi bus.
            </summary>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.RTCPi.IsConnected">
            <summary>
                Shows if there is a connection with the RTC Pi.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.Connect">
            <summary>
                Open a connection with the RTC Pi.
            </summary>
            <returns></returns>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.RTCPi.Connected">
            <summary>
                Event occurs when connection is made.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.BCDtoInt(System.Byte)">
            <summary>
                Converts BCD format to integer.
            </summary>
            <param name="x">BCD formatted byte</param>
            <returns></returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.BytetoBCD(System.Int32)">
            <summary>
                Converts byte to BCD format.
            </summary>
            <param name="val">value to convert</param>
            <returns>Converted byte</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.SetDate(System.DateTime)">
            <summary>
                Set the date and time on the RTC.
            </summary>
            <param name="date">DateTime</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.ReadDate">
            <summary>
                Read the date and time from the RTC.
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.EnableOutput">
            <summary>
                Enable the clock output pin.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.DisableOutput">
            <summary>
                Disable the clock output pin.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.SetFrequency(System.Byte)">
            <summary>
                Set the frequency of the output pin square-wave.
            </summary>
            <param name="frequency">options are: 1 = 1Hz, 2 = 4.096KHz, 3 = 8.192KHz, 4 = 32.768KHz</param>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.Dispose">
            <summary>
                Dispose of the resources
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.RTCPi.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ABElectronics_Win10IOT_Libraries.ServoPi">
            <summary>
                Class for controlling the Servo Pi expansion board from AB Electronics UK
                Based on the PCA9685 PWM controller IC from NXT.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.#ctor(System.Byte,System.Byte)">
            <summary>
                Create an instance of a Servo Pi bus.
            </summary>
            <param name="address">I2C address of Servo Pi bus</param>
            <param name="outputEnablePin">GPIO pin for Output Enable function (0-disabled)</param>
            <example>ABElectronics_Win10IOT_Libraries.ServoPi servo = new ABElectronics_Win10IOT_Libraries.ServoPi();</example>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ServoPi.Address">
            <summary>
                I2C address for the Servo Pi bus.
            </summary>
            <example>servopi.Address = 0x40;</example>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ServoPi.OutputEnablePin">
            <summary>
                Set the GPIO pin for the output enable function.
                The default GPIO pin 4 is not supported in Windows 10 IOT so the OE pad will need to be connected to a different
                GPIO pin.
            </summary>
            <example>servopi.OutputEnablePin = 17;</example>
        </member>
        <member name="P:ABElectronics_Win10IOT_Libraries.ServoPi.IsConnected">
            <summary>
                Shows if there is a connection with the Servo Pi
            </summary>
            <example>if (servopi.IsConnected) { }</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.Connect">
            <summary>
                Open a connection with the Servo Pi
            </summary>
            <returns></returns>
            <example>servopi.Connect();</example>
        </member>
        <member name="E:ABElectronics_Win10IOT_Libraries.ServoPi.Connected">
            <summary>
                Event occurs when connection is made.
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.SetPWMFreqency(System.Int32)">
            <summary>
                Set the output frequency of all PWM channels.
                The output frequency is programmable from a typical 40Hz to 1000Hz.
            </summary>
            <param name="freq">Integer frequency value</param>
            <example>servopi.SetPWMFreqency(500);</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.SetPWM(System.Byte,System.Int16,System.Int16)">
            <summary>
                Set the PWM output on a single <paramref name="channel"/>.
            </summary>
            <param name="channel">1 to 16</param>
            <param name="on">Value between 0 and 4096</param>
            <param name="off">Value between 0 and 4096</param>
            <example>servopi.SetPWM(1,512,1024);</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.SetAllPWM(System.Int16,System.Int16)">
            <summary>
                Set PWM output on all channels.
            </summary>
            <param name="on">Value between 0 and 4096</param>
            <param name="off">Value between 0 and 4096</param>
            <example>servopi.SetAllPWM(512,1024);</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.OutputDisable">
            <summary>
                Disable output via OE pin.  Only used when the OE jumper is joined.
            </summary>
            <example>servopi.OutputDisable();</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.OutputEnable">
            <summary>
                Enable output via OE pin.  Only used when the OE jumper is joined.
            </summary>
            <example>servopi.OutputEnable();</example>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.Dispose">
            <summary>
                Dispose of the resources
            </summary>
        </member>
        <member name="M:ABElectronics_Win10IOT_Libraries.ServoPi.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
    </members>
</doc>
